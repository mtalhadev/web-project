{"version":3,"sources":["Home.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["App","useEffect","_React$useState","React","useState","userid","uuidv4","startChat","allMessages","receiverId","roomNo","message","senderId","interest","userid2","interest2","_React$useState2","Object","slicedToArray","state","setState","_deleteRoom","asyncToGenerator","regenerator_default","a","mark","_callee2","event","wrap","_context2","prev","next","preventDefault","console","log","fetch","method","body","JSON","stringify","headers","Accept","Content-Type","then","_ref","_callee","res","response_body","_context","status","json","sent","Error","error","stop","_x4","apply","this","arguments","catch","err","alert","_sendMessage","_callee5","_context5","_ref2","_callee4","_context4","objectSpread","_ref3","_callee3","_response_body","_context3","results","_x6","_x5","_addInQueue","_callee14","searchUser","_searchUser","_context14","_callee13","_context13","_ref8","_callee12","room","_context12","userid1","slice","_ref9","_callee11","_response_body4","_context11","_ref10","_callee10","_response_body5","_context10","_x13","_x12","_x11","_ref4","_callee9","_context9","_ref5","_callee8","_context8","_ref6","_callee7","_response_body2","_context7","_ref7","_callee6","_response_body3","_context6","_x10","_x9","setTimeout","_x8","_x7","handleInputChange","_event$target","target","value","name","defineProperty","react_default","createElement","class","style","backgroundColor","display","flexDirection","justifyContent","alignItems","padding","href","src","width","height","alt","loading","id","for","onChange","multiple","marginTop","onClick","_x3","color","_x","className","margin","map","item","Fragment","type","size","autocomplete","_x2","Chat","props","react_router_dom","react_router","path","component","exact","render","Home_App","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c30d2eb4.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nexport default function App() {\r\n    useEffect(() => {\r\n\r\n    }, {})\r\n    const [state, setState] = React.useState({ userid: uuidv4(), startChat: false, allMessages: [], receiverId: \"\", roomNo: \"\", message: \"\", senderId: \"\", interest: \"\", userid2: \"\", interest2: \"\" })\r\n    async function deleteRoom(event) {\r\n        event.preventDefault();\r\n        console.log(state.roomNo)\r\n        await fetch('/deleteroom', {\r\n            method: 'post',\r\n            body: JSON.stringify(state),\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(async (res) => {\r\n\r\n                if (res.status === 200) {\r\n                    // setState({productUploaded: true,\r\n                    //     serial: \"\"                        \r\n                    // })\r\n                    let response_body = await res.json();\r\n                    console.log(response_body, \"4\")\r\n\r\n                    setState({ startChat: false })\r\n                } else {\r\n                    const error = new Error(res.error);\r\n                    throw error;\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                alert('Error deleting the room, please try again');\r\n            });\r\n\r\n    }\r\n    async function sendMessage(event) {\r\n        event.preventDefault();\r\n        console.log(state)\r\n        \r\n        await fetch('/insertmessage', {\r\n            method: 'post',\r\n            body: JSON.stringify(state),\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(async (res) => {\r\n\r\n                if (res.status === 200) {\r\n                    // setState({productUploaded: true,\r\n                    //     serial: \"\"                        \r\n                    // })\r\n                    setState({ ...state, message: \"\" })\r\n\r\n                    let response_body = await res.json();\r\n                    // let roomNo=await response_body.roomNo\r\n                    console.log(response_body, \"5\")\r\n\r\n                    await fetch('/getmessages', {\r\n                        method: 'post',\r\n                        body: JSON.stringify(state),\r\n                        headers: {\r\n                            'Accept': 'application/json, text/plain, */*',\r\n                            'Content-Type': 'application/json',\r\n                        }\r\n                    })\r\n                        .then(async (res) => {\r\n\r\n                            if (res.status === 200) {\r\n                                setState({ ...state, message: \"\" })\r\n                                let response_body = await res.json();\r\n                                let allMessages = await response_body.results\r\n                                console.log(allMessages, \"6\")\r\n\r\n                                setState({ ...state, allMessages })\r\n                            } else {\r\n                                const error = new Error(res.error);\r\n                                throw error;\r\n                            }\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(err);\r\n                            alert('Error getting messages, please try again');\r\n                        });\r\n\r\n                } else {\r\n                    const error = new Error(res.error);\r\n                    throw error;\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                alert('Error sending message, please try again');\r\n            });\r\n    }\r\n    async function addInQueue(event) {\r\n        event.preventDefault();\r\n       async function searchUser() {\r\n            await fetch('/searchforpartner', {\r\n                method: 'post',\r\n                body: JSON.stringify(state),\r\n                headers: {\r\n                    'Accept': 'application/json, text/plain, */*',\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            })\r\n                .then(async (res) => {\r\n\r\n                    if (res.status === 200) {\r\n                        // setState({productUploaded: true,\r\n                        //     serial: \"\"                        \r\n                        // })\r\n                        \r\n                        let response_body = await res.json();\r\n                        console.log(res.results)\r\n                        let userid2 = await response_body.results[0].userid\r\n                        console.log(userid2, \"talhakatest\")\r\n                        setState({ ...state, userid2: response_body.results[0].userid, interest2: response_body.results[0].interest })\r\n                        console.log(response_body.results[0].userid, \"3\")\r\n                        \r\n                        let room = {\r\n                            userid1: state.userid.slice(0, 5),\r\n                            userid2: userid2.slice(0, 5)\r\n                        }\r\n                        await fetch('/createroom', {\r\n                            method: 'post',\r\n                            body: JSON.stringify(room),\r\n                            headers: {\r\n                                'Accept': 'application/json, text/plain, */*',\r\n                                'Content-Type': 'application/json',\r\n                            }\r\n                        })\r\n                            .then(async (res) => {\r\n\r\n                                if (res.status === 200) {\r\n                                    // setState({productUploaded: true,\r\n                                    //     serial: \"\"                        \r\n                                    // })\r\n                                    let response_body = await res.json();\r\n                                    let roomNo = await response_body.roomNo\r\n                                    console.log(response_body.roomNo, \"4\")\r\n                                    setState({ ...state, senderId: state.userid, receiverId: userid2, startChat: true, roomNo })\r\n                                    await fetch('/deletefromqueue', {\r\n                                        method: 'post',\r\n                                        body: JSON.stringify(state),\r\n                                        headers: {\r\n                                            'Accept': 'application/json, text/plain, */*',\r\n                                            'Content-Type': 'application/json',\r\n                                        }\r\n                                    })\r\n                                        .then(async (res) => {\r\n\r\n                                            if (res.status === 200) {\r\n                                                // setState({productUploaded: true,\r\n                                                //     serial: \"\"                        \r\n                                                // })\r\n                                                let response_body = await res.json();\r\n\r\n                                                console.log(response_body, \"last\")\r\n                                            } else {\r\n                                                const error = new Error(res.error);\r\n                                                throw error;\r\n                                            }\r\n                                        })\r\n                                        .catch(err => {\r\n                                            console.error(err);\r\n                                            alert('Error removing from queue, please try again');\r\n                                        });\r\n                                } else {\r\n                                    const error = new Error(res.error);\r\n                                    throw error;\r\n                                }\r\n                            })\r\n                            .catch(err => {\r\n                                console.error(err);\r\n                                alert('Error creating room, please try again');\r\n                            });\r\n                        \r\n                    }\r\n                    \r\n                    else if(res.status==400){\r\nalert(\"No Users found,please try again\")\r\n                    }\r\n                    else {\r\n                        const error = new Error(res.error);\r\n                        throw error;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.error(err);\r\n                    alert('Error searching for partner, please try again');\r\n                });\r\n\r\n        }\r\n        setState({ ...state, userid: uuidv4() },)\r\n        console.log(state)\r\n        await fetch('/insertinqueue', {\r\n            method: 'post',\r\n            body: JSON.stringify(state),\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(async (res) => {\r\n                if (res.status === 200) {\r\n                    \r\n                    console.log(res.json(), \"1\")\r\n                    await fetch('/searchforpartner', {\r\n                        method: 'post',\r\n                        body: JSON.stringify(state),\r\n                        headers: {\r\n                            'Accept': 'application/json, text/plain, */*',\r\n                            'Content-Type': 'application/json',\r\n                        }\r\n                    })\r\n                        .then(async (res) => {\r\n\r\n                            if (res.status === 200) {\r\n                                // setState({productUploaded: true,\r\n                                //     serial: \"\"                        \r\n                                // })\r\n                                \r\n                                let response_body = await res.json();\r\n                                console.log(res.results)\r\n                                let userid2 = await response_body.results[0].userid\r\n                                console.log(userid2, \"talhakatest\")\r\n                                setState({ ...state, userid2: response_body.results[0].userid, interest2: response_body.results[0].interest })\r\n                                console.log(response_body.results[0].userid, \"3\")\r\n                                \r\n                                let room = {\r\n                                    userid1: state.userid.slice(0, 5),\r\n                                    userid2: userid2.slice(0, 5)\r\n                                }\r\n                                await fetch('/createroom', {\r\n                                    method: 'post',\r\n                                    body: JSON.stringify(room),\r\n                                    headers: {\r\n                                        'Accept': 'application/json, text/plain, */*',\r\n                                        'Content-Type': 'application/json',\r\n                                    }\r\n                                })\r\n                                    .then(async (res) => {\r\n\r\n                                        if (res.status === 200) {\r\n                                            // setState({productUploaded: true,\r\n                                            //     serial: \"\"                        \r\n                                            // })\r\n                                            let response_body = await res.json();\r\n                                            let roomNo = await response_body.roomNo\r\n                                            console.log(response_body.roomNo, \"4\")\r\n                                            setState({ ...state, senderId: state.userid, receiverId: userid2, startChat: true, roomNo })\r\n                                            await fetch('/deletefromqueue', {\r\n                                                method: 'post',\r\n                                                body: JSON.stringify(state),\r\n                                                headers: {\r\n                                                    'Accept': 'application/json, text/plain, */*',\r\n                                                    'Content-Type': 'application/json',\r\n                                                }\r\n                                            })\r\n                                                .then(async (res) => {\r\n\r\n                                                    if (res.status === 200) {\r\n                                                        // setState({productUploaded: true,\r\n                                                        //     serial: \"\"                        \r\n                                                        // })\r\n                                                        let response_body = await res.json();\r\n\r\n                                                        console.log(response_body, \"last\")\r\n                                                    } else {\r\n                                                        const error = new Error(res.error);\r\n                                                        throw error;\r\n                                                    }\r\n                                                })\r\n                                                .catch(err => {\r\n                                                    console.error(err);\r\n                                                    alert('Error removing from queue, please try again');\r\n                                                });\r\n                                        } else {\r\n                                            const error = new Error(res.error);\r\n                                            throw error;\r\n                                        }\r\n                                    })\r\n                                    .catch(err => {\r\n                                        console.error(err);\r\n                                        alert('Error creating room, please try again');\r\n                                    });\r\n                                \r\n                            }\r\n                            \r\n                            else if(res.status==400){\r\n                                setTimeout(() => {\r\n                                    searchUser()\r\n                                }, 30000);\r\n\r\n                            }\r\n                            else {\r\n                                const error = new Error(res.error);\r\n                                throw error;\r\n                            }\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(err);\r\n                            alert('Error searching for partner, please try again');\r\n                        });\r\n\r\n                } else {\r\n                    const error = new Error(res.error);\r\n                    throw error;\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                alert('Error adding in queue, please try again');\r\n            });\r\n    }\r\n    function handleInputChange(event) {\r\n        const { value, name } = event.target;\r\n        setState({\r\n            ...state,\r\n            [name]: value\r\n        });\r\n    }\r\n    return (\r\n        <div>\r\n            {!state.startChat &&\r\n                <div>\r\n                    <nav class=\"navbar navbar-light bg-light\" style={{ backgroundColor: \"#f8f9fa\", display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\", padding: \"10px 20px\" }}>\r\n                        <a class=\"navbar-brand\" href=\"#\">\r\n                            <img src=\"/docs/4.5/assets/brand/bootstrap-solid.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" loading=\"lazy\" />\r\n                            <p id=\"tit\">Omegle Clone</p>\r\n                        </a>\r\n                        <div>\r\n                            <p id=\"tagLine\">Talk With Strangers!</p>\r\n                        </div>\r\n                    </nav>\r\n\r\n                    <div class=\"container\">\r\n                        <center><p style={{ width: \"80%\" }}>Omegle (oh·meg·ull) is a great way to meet new friends, even while practicing social distancing. When you use Omegle, we pick someone else at random and let you talk one-on-one. To help you stay safe, chats are anonymous unless you tell someone who you are (not suggested!), and you can stop a chat at any time. Predators have been known to use Omegle, so please be careful. If you prefer, you can add your interests, and Omegle will look for someone who's into some of the same things as you instead of someone completely random.</p></center>\r\n                    </div>\r\n                    <br />\r\n                    <center><h2>What Do you wanna chat about?</h2>\r\n                        <label id=\"interest\" for=\"cars\">Choose Interests:</label>\r\n                        <div class=\"divider\"></div>\r\n                        <br />\r\n                        <select\r\n                            name=\"interest\"\r\n                            id=\"interest\"\r\n                            value={state.interest}\r\n                            onChange={handleInputChange}\r\n                            multiple\r\n                        >\r\n                            <option value=\"cars\">Cars</option>\r\n                            <option value=\"dating\">Dating</option>\r\n                            <option value=\"funny\">Fuwwy O~O</option>\r\n                            <option value=\"movies\">Movies</option>\r\n                            <option value=\"programming\">Programming</option>\r\n                            <option value=\"comedy\">Comedy</option>\r\n                            <option value=\"nature\">Nature</option>\r\n                            <option value=\"sFiction\">Science Fiction</option>\r\n                            <option value=\"music\">Music</option>\r\n                        </select>\r\n                        <div class=\"buttonDiv\" style={{ display: \"block\", marginTop: \"20px\" }}>\r\n                            {/* <Link to=\"/chat\" class=\"testbutton\" >Find Stranger</Link> */}\r\n                            <button onClick={addInQueue} class=\"testbutton\">Find Stranger</button>\r\n                        </div>\r\n                    </center>\r\n                </div>\r\n            }\r\n            {state.startChat &&\r\n                <div>\r\n                    <h2>Chat Down Here!</h2>\r\n                    <div class=\"chatbox flex-container\">\r\n                        <span style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"0px 20px\", backgroundColor: \"white\", color: \"black\" }}>\r\n                            <h3>Anonymous</h3>\r\n                            <button onClick={deleteRoom} className=\"deleteButtonChat\" style={{ backgroundColor: \"red\", padding: \"0px 20px\", margin: \"5px\", color: \"black\" }}>X</button>\r\n                        </span>\r\n                        {state.allMessages.map(item => {\r\n                            return (\r\n                                <>\r\n                                    {item.receiverId == state.receiverId &&\r\n                                        <>\r\n                                            <div class=\"stranger\">\r\n                                                <p class=\"strangerp\">{item.message}</p>\r\n                                                {/* <p class=\"strangerp strangert\">11:00</p> */}\r\n                                            </div>\r\n                                            <div class=\"chatDivider\"></div>\r\n                                        </>\r\n                                    }\r\n                                    {item.senderId == state.senderId &&\r\n                                        <>\r\n                                            <div class=\"you\">\r\n                                                <p class=\"youc\">{item.message}</p>\r\n                                                {/* <p class=\"youc yout\">11:00</p> */}\r\n                                            </div>\r\n                                            <div class=\"chatDivider\"></div>\r\n                                        </>}\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </div>\r\n\r\n                    <div class=\"divider\"></div>\r\n                    <div class=\"formDiv\">\r\n                        <form>\r\n                            <input id=\"textinput\" type=\"text\" name=\"message\" size=\"80\"\r\n                                value={state.message}\r\n                                autocomplete=\"off\"\r\n                                onChange={handleInputChange}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n\r\n                    <div class=\"buttonDiv\">\r\n                        <button type=\"button\" class=\"testbutton\" onClick={sendMessage}>Send</button>\r\n                    </div>\r\n                </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './chat.css'\r\nexport default function Chat() {\r\n    return (\r\n        <div>\r\n              \r\n<nav class=\"navbar navbar-light bg-light\"  style={{ backgroundColor: \"#f8f9fa\",padding:\"10px\"}}>\r\n    <a class=\"navbar-brand\" href=\"#\">\r\n      <img src=\"/docs/4.5/assets/brand/bootstrap-solid.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\" loading=\"lazy\" />\r\n     <p id=\"tit\">Omegle Clone</p>\r\n    </a>\r\n  </nav>\r\n\r\n  <h2>Chat Down Here!</h2>\r\n  <div class=\"chatbox flex-container\">\r\n\r\n    <div class=\"stranger\">\r\n      <p class=\"strangerp\">Hello Hello</p>\r\n      <p class=\"strangerp strangert\">11:00</p>\r\n    </div>\r\n    <div class=\"chatDivider\"></div>\r\n\r\n    <div class=\"you\">\r\n      <p class=\"youc\">Can you hear me, as I scream your name?</p>\r\n      <p class=\"youc yout\">11:00</p>\r\n    </div>\r\n    <div class=\"chatDivider\"></div>\r\n\r\n    <div class=\"stranger\">\r\n      <p class=\"strangerp\">Hello Hello</p>\r\n      <p class=\"strangerp strangert\">11:01</p>\r\n    </div>\r\n    <div class=\"chatDivider\"></div>\r\n\r\n    <div class=\"stranger\">\r\n      <p class=\"strangerp\">Do you need me, before I fade away?</p>\r\n      <p class=\"strangerp strangert\">11:01</p>\r\n    </div>\r\n    <div class=\"chatDivider\"></div>\r\n\r\n    <div class=\"you\">\r\n      <p class=\"youc\">Is this a place that I call home</p>\r\n      <p class=\"youc yout\">11:02</p>\r\n    </div>\r\n    <div class=\"chatDivider\"></div>\r\n\r\n    <div class=\"stranger\">\r\n      <p class=\"strangerp\">Is this the place that I call home</p>\r\n      <p class=\"strangerp strangert\">11:03</p>\r\n    </div>\r\n    <div class=\"chatDivider\"></div>\r\n\r\n    <div class=\"you\">\r\n      <p class=\"youc\">Walk around the path unknown</p>\r\n      <p class=\"youc yout\">11:04</p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"divider\"></div>\r\n   <div class=\"formDiv\">\r\n    <form>\r\n      <input id=\"textinput\" type=\"text\" name=\"fname\" size = \"80\" autocomplete=\"off\" />\r\n    </form>\r\n   </div>\r\n\r\n    <div class=\"buttonDiv\">\r\n        <button type=\"button\" class=\"testbutton\">Send</button>\r\n    </div> \r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react';\n// import { connect } from 'react-redux'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Home from './Home'\nimport Chat from './Chat'\nfunction App(props) {\n\n  return (\n    <div>\n      <Router>\n      \n          <>\n            <Route path=\"/chat\" component={Chat} />\n            <Route exact path=\"/\" render={(props) => {\n              return (\n                <React.Fragment>\n                  <Home />\n                </React.Fragment>\n              )\n            }} />\n          </>\n      </Router>\n    </div>\n  )\n\n}\n\n// const mapStateToProps = state => ({\n//   profile: state.profileFetch.profile,\n//   profileStaff:state.profileFetch.profileStaff,\n//   loginStatus: state.profileFetch.loginStatus,\n//   loginHome: state.profileFetch.loginHome,\n//   loginStatusStaff:state.profileFetch.loginStatusStaff\n// })\n// export default connect(mapStateToProps, { fetchProfile, fetchLoginStatus, fetchLoginHome,fetchLoginStatusStaff })(App);\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}